'use strict';

/* global require, exports */

var utils = require('utils');

var KeyboardConfigure = function() {
};

// set options
KeyboardConfigure.prototype.setOptions = function(options) {
  this.enabledLayouts = options.GAIA_KEYBOARD_LAYOUTS.split(',');
  this.preloadDictLayouts =
    options.GAIA_KEYBOARD_PRELOAD_DICT_LAYOUTS.split(',');
  this.userDictEnabled = options.GAIA_KEYBOARD_ENABLE_USER_DICT === '1';
  this.handwritingEnabled = this.enabledLayouts.some(function(layoutId) {
    return (this.HANDWRITING_LAYOUTS.indexOf(layoutId) !== -1);
  }, this);
  this.distDir = utils.getFile(options.STAGE_APP_DIR);
  this.appDir = utils.getFile(options.APP_DIR);
  this.distBuildDir = utils.getFile(this.distDir.path, 'build');

  utils.ensureFolderExists(this.distBuildDir);
};

KeyboardConfigure.prototype.HANDWRITING_LAYOUTS = ['zh-Hans-Handwriting'];

KeyboardConfigure.prototype.writeBuildConfig = function() {
  var configContent = JSON.stringify({
    enabledLayouts: this.enabledLayouts.sort(),
    preloadDictLayouts: this.preloadDictLayouts.sort(),
    userDictEnabled: this.userDictEnabled,
    handwritingEnabled: handwritingEnabled,
    distDir: this.distDir.path,
    appDir: this.appDir.path
  }, null, 2);

  var buildConfigFile = utils.getFile(this.distBuildDir.path, 'config.json');
  var originalConfigContent = utils.getFileContent(buildConfigFile);

  // Only writes (and updates timestamp) config.json if the configurations
  // have changed.
  if (configContent !== originalConfigContent) {
    utils.writeContent(buildConfigFile, config);
  }
};

KeyboardConfigure.prototype.writeConfigStatus = function() {
  var configStatusContent = utils.getFileContent(
    utils.getFile(this.appDir, 'build', 'config.status.in.js'));

  configStatusContent =
    '// DO NOT EDIT: This file is automatically generated.\n' +
    configStatusContent;

  var configStatusDist =
    utils.getFile(this.distBuildDir.path, 'config.status.js');
  utils.writeContent(configStatusDist, configStatusContent);

  return configStatusDist.path;
};

KeyboardConfigure.prototype.execute = function(options) {
  this.setOptions(options);
  this.writeBuildConfig();
  var path = this.writeConfigStatus();

  // Run config.status.
  require(path).execute(this.distDir.path);
};

exports.execute = function(options) {
  // We cannot export prototype functions out :(
  // so we run execute() this way.
  (new KeyboardConfigure()).execute(options);
};
